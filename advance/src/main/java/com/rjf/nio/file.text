 long start = System.currentTimeMillis();
        FileInputStream ins = null;
        FileOutputStream out = null;

        //1、获取通道
        FileChannel inChannel = null;
        FileChannel outChannel= null;
        try
        {
            ins = new FileInputStream("C:\\temp\\test\\1.zip");
            out = new FileOutputStream("C:\\temp\\test\\2.zip");
            inChannel = ins.getChannel();
            outChannel = out.getChannel();

            //2、分配指定大小的缓冲区
            ByteBuffer buf = ByteBuffer.allocate(1024);
            //3、将通道中的数据存入缓冲区
            while(inChannel.read(buf) != -1)
            {
                //切换读取数据模式
                buf.flip();
                //将缓冲区的数据写入通道
                outChannel.write(buf);
                //清空缓冲区
                buf.clear();
            }
        }
        catch(Exception  e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(outChannel != null)
            {
                try {
                    outChannel.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                }
            }

            if(inChannel != null)
            {
                try {
                    inChannel.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }

            if(ins != null)
            {
                try {
                    ins.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }

            if(out != null)
            {
                try {
                    out.close();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        long end = System.currentTimeMillis();
        System.out.println("耗时："+(end - start));